# fastlane/Fastfile

default_platform(:ios)

TEAMID = ENV["TEAMID"]
GH_PAT = ENV["GH_PAT"]
GITHUB_WORKSPACE = ENV["GITHUB_WORKSPACE"]
GITHUB_REPOSITORY_OWNER = ENV["GITHUB_REPOSITORY_OWNER"]
FASTLANE_KEY_ID = ENV["FASTLANE_KEY_ID"]
FASTLANE_ISSUER_ID = ENV["FASTLANE_ISSUER_ID"]
FASTLANE_KEY = ENV["FASTLANE_KEY"]
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

BUNDLE_ID = "com.#{TEAMID}.loopkit.LoopFollow"

platform :ios do
  desc "Build Loop Follow"
  lane :build_LoopFollow do
    setup_ci if ENV['CI']

    update_project_team(
      path: "#{GITHUB_WORKSPACE}/LoopFollow.xcodeproj",
      teamid: TEAMID.to_s
    )

    # 1) Sett riktig bundle id i Info.plist
    update_app_identifier(
      xcodeproj: "#{GITHUB_WORKSPACE}/LoopFollow.xcodeproj",
      plist_path: "LoopFollow/Info.plist",
      app_identifier: BUNDLE_ID
    )

    # 2) Sett også PRODUCT_BUNDLE_IDENTIFIER inne i .xcodeproj (så vi slipper xcargs)
    ruby <<-RUBY
      require 'xcodeproj'
      project_path = File.join(ENV['GITHUB_WORKSPACE'], 'LoopFollow.xcodeproj')
      proj   = Xcodeproj::Project.open(project_path)
      target = proj.targets.find { |t| t.name == 'LoopFollow' }
      raise 'Fant ikke target LoopFollow' unless target
      target.build_configurations.each do |cfg|
        cfg.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = '#{BUNDLE_ID}'
      end
      proj.save
      puts "✅ PRODUCT_BUNDLE_IDENTIFIER satt til #{'#'}{ '#{BUNDLE_ID}' }"
    RUBY

    api_key = app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    # Hent siste TF-buildnummer (fallback 0)
    previous_build_number = 0
    begin
      previous_build_number = latest_testflight_build_number(
        app_identifier: BUNDLE_ID,
        api_key: api_key
      )
    rescue
      previous_build_number = 0
    end

    increment_build_number(
      xcodeproj: "#{GITHUB_WORKSPACE}/LoopFollow.xcodeproj",
      build_number: previous_build_number.to_i + 1
    )

    # Certs/profiler
    match(
      type: "appstore",
      app_identifier: [BUNDLE_ID],
      git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
      readonly: false,
      generate_apple_certs: false
    )

    mapping = Actions.lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]

    update_code_signing_settings(
      path: "#{GITHUB_WORKSPACE}/LoopFollow.xcodeproj",
      profile_name: mapping[BUNDLE_ID],
      code_sign_identity: "Apple Distribution",
      targets: ["LoopFollow"],
      use_automatic_signing: false
    )

    # 3) Bygg (⚠️ ingen xcargs her)
    gym(
      export_method: "app-store",
      scheme: "LoopFollow",
      output_name: "LoopFollow",
      configuration: "Release",
      destination: 'generic/platform=iOS',
      buildlog_path: 'buildlog',
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          BUNDLE_ID => mapping[BUNDLE_ID]
        }
      }
    )

    copy_artifacts(
      target_path: "artifacts",
      artifacts: ["*.mobileprovision", "*.ipa", "*.dSYM.zip"]
    )
  end

  desc "Upload IPA til TestFlight"
  lane :release do
    api_key = app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    upload_to_testflight(
      api_key: api_key,
      skip_submission: false,
      ipa: "LoopFollow.ipa",
      skip_waiting_for_build_processing: true
    )
  end

  desc "Provision Identifiers (oppretter bundle ID om den mangler)"
  lane :identifiers do
    setup_ci if ENV['CI']

    app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    def ensure_bundle_id(name, identifier)
      Spaceship::ConnectAPI::BundleId.find(identifier) ||
        Spaceship::ConnectAPI::BundleId.create(
          name: name,
          identifier: identifier,
          platform: "IOS"
        )
    end

    ensure_bundle_id("LoopFollow", BUNDLE_ID)
  end

  desc "Provision Certificates (bruker Caregiver-repoet; ingen nye certs)"
  lane :certs do
    setup_ci if ENV['CI']

    app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    match(
      type: "appstore",
      app_identifier: [BUNDLE_ID],
      git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
      readonly: false,
      generate_apple_certs: false
    )
  end

  desc "Validate Secrets (read-only; rører ikke certs)"
  lane :validate_secrets do
    setup_ci if ENV['CI']

    app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    Spaceship::ConnectAPI::BundleId.find(BUNDLE_ID)

    match(
      type: "appstore",
      app_identifier: [],
      git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION'],
      readonly: true,
      generate_apple_certs: false
    )
  end

  # ADVARSEL: slett certs fra Apple-teamet. Ikke bruk uten at du mener det.
  desc "Nuke Certs"
  lane :nuke_certs do
    setup_ci if ENV['CI']

    app_store_connect_api_key(
      key_id: FASTLANE_KEY_ID.to_s,
      issuer_id: FASTLANE_ISSUER_ID.to_s,
      key_content: FASTLANE_KEY.to_s
    )

    match_nuke(
      type: "appstore",
      team_id: TEAMID.to_s,
      skip_confirmation: true,
      git_basic_authorization: ENV['MATCH_GIT_BASIC_AUTHORIZATION']
    )
  end
end
